/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.ManageFlight;

import Business.Airliner.Airliner;
import Business.Flight.Flight;
import Business.Flight.FlightDirectory;
import UserInterface.LoginScreen;
import java.awt.CardLayout;
import java.awt.Component;
import java.sql.Time;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.format.DateTimeFormatter;
import java.util.Calendar;
import java.util.Date;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.JTable;
import javax.swing.SpinnerDateModel;

/**
 *
 * @author shahd
 */
public class CreateAirlineFlightScheduleJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageAirlinerFlightScheduleJPanel
     */
    private JPanel rightPanel;
    private FlightDirectory flightdir;
    private Airliner airliner;
    private JPanel jPanelLeft;
    private String[] sourceList = {"Boston","New York","California","Chicago","New Jersey"};
    private String[] destinationList = {"Boston","New York","California","Chicago","New Jersey"};
    public CreateAirlineFlightScheduleJPanel(JPanel rightPanel,JPanel jPanelLeft,FlightDirectory flightDir, Airliner airliner) {
        this.rightPanel=rightPanel;
        this.flightdir=flightDir;
        this.airliner = airliner;
        this.jPanelLeft = jPanelLeft;
        initComponents();
        initialize();
        lblAirlinerName.setText(airliner.getAirlinerName());
    }
    
     private void initialize(){
        if(!airliner.getAirlinerAircraftName().isEmpty()){
            comboBoxAircraftName.removeAllItems();
            for(String aircraftName: airliner.getAirlinerAircraftName()){
                comboBoxAircraftName.addItem(aircraftName);
            }
        }
        if(sourceList.length > 0){
            comboBoxSource.removeAll();
            for(String source: sourceList){
                comboBoxSource.addItem(source);
            }
        }
        
        if(destinationList.length > 0){
            comboBoxDest.removeAll();
            for(String dest: destinationList){
                comboBoxDest.addItem(dest);
            }
        }
    }

    
    private boolean onlyLettersValidation(String input){
        Pattern p = Pattern.compile("^[a-zA-Z]+$");
        Matcher m = p.matcher(input);
        boolean b = m.matches();
        return b;
    }
    
    private boolean atleastOneLetterValidation(String input){
        Pattern p = Pattern.compile("^([^A-Za-z]+)$");
        Matcher m = p.matcher(input);
        boolean b = m.matches();
        return b;
    }
    
    private boolean phoneNumValidation(String input){
        Pattern p = Pattern.compile("^(\\d{10})$");
        Matcher m = p.matcher(input);
        boolean b = m.matches();
        return b;
    }
    private boolean timeValidation(String input){
        System.out.println(input);
        Pattern p = Pattern.compile("^\\d{2}:\\d{2}$");
        Matcher m = p.matcher(input);
        boolean b = m.matches();
        System.out.println(b);
        return b;
    }
    private boolean DateValidation(String input){
        Pattern p = Pattern.compile("^[A-Z][a-z][a-z]\\s\\d{2}/\\d{2}/\\d{4}$");
        Matcher m = p.matcher(input);
        boolean b = m.matches();
        return b;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        datePickerDepart = new org.jdesktop.swingx.JXDatePicker();
        flightNameLabel = new javax.swing.JLabel();
        airlinerLabel = new javax.swing.JLabel();
        flightNameTextField = new javax.swing.JTextField();
        sourceLabel = new javax.swing.JLabel();
        desitinationLabel = new javax.swing.JLabel();
        comboBoxSource = new javax.swing.JComboBox<>();
        comboBoxDest = new javax.swing.JComboBox<>();
        desitinationLabel1 = new javax.swing.JLabel();
        departLabel = new javax.swing.JLabel();
        Date date = new Date();
        SpinnerDateModel sm =
        new SpinnerDateModel(date, null, null, Calendar.HOUR_OF_DAY);
        departSpinner = new javax.swing.JSpinner(sm);
        jLabel1 = new javax.swing.JLabel();
        SpinnerDateModel sm2 =
        new SpinnerDateModel(date, null, null, Calendar.HOUR_OF_DAY);
        arrivalSpinner = new javax.swing.JSpinner(sm2);
        durationLabel = new javax.swing.JLabel();
        durationTxtField = new javax.swing.JTextField();
        createBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        backBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtFlightCost = new javax.swing.JTextField();
        datePickerArrive = new org.jdesktop.swingx.JXDatePicker();
        desitinationLabel2 = new javax.swing.JLabel();
        lblAirlinerName = new javax.swing.JLabel();
        comboBoxAircraftName = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        btnLogOut2 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();

        datePickerDepart.setFocusable(false);

        flightNameLabel.setText("Flight Name");

        airlinerLabel.setText("Airliner Name");

        flightNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flightNameTextFieldActionPerformed(evt);
            }
        });

        sourceLabel.setText("Source City");

        desitinationLabel.setText("Destination City");

        desitinationLabel1.setText("Date of Departure");

        departLabel.setText("Departure Time");

        JSpinner.DateEditor de = new JSpinner.DateEditor(departSpinner, "HH:mm");
        departSpinner.setEditor(de);
        departSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                departSpinnerStateChanged(evt);
            }
        });

        jLabel1.setText("Arrival Time");

        JSpinner.DateEditor de2 = new JSpinner.DateEditor(arrivalSpinner, "HH:mm");
        arrivalSpinner.setEditor(de2);

        durationLabel.setText("Flight Duration in Hrs");

        createBtn.setText("Create");
        createBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createBtnActionPerformed(evt);
            }
        });

        jLabel3.setText("Aircraft Name");

        backBtn.setText("<<Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        jLabel2.setText("Flight Cost");

        datePickerArrive.setFocusable(false);

        desitinationLabel2.setText("Date of Arrival");

        comboBoxAircraftName.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel4.setText("admin");

        btnLogOut2.setText("Log Out");
        btnLogOut2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogOut2ActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        jLabel5.setText("Create Flight");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(118, 118, 118)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(sourceLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(flightNameLabel, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(airlinerLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(desitinationLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(desitinationLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
                                    .addComponent(departLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(desitinationLabel2, javax.swing.GroupLayout.Alignment.LEADING)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(181, 181, 181)
                                .addComponent(jLabel4)
                                .addGap(2, 2, 2)
                                .addComponent(btnLogOut2, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(txtFlightCost, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(datePickerDepart, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 470, Short.MAX_VALUE)
                                .addComponent(datePickerArrive, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(departSpinner, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(comboBoxDest, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(comboBoxSource, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblAirlinerName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(flightNameTextField, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(arrivalSpinner, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(durationTxtField, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(comboBoxAircraftName, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(118, 118, 118)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(durationLabel, javax.swing.GroupLayout.Alignment.LEADING)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(343, 343, 343)
                        .addComponent(createBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(70, 70, 70))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLogOut2, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(flightNameLabel)
                    .addComponent(flightNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(airlinerLabel)
                    .addComponent(lblAirlinerName, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sourceLabel)
                    .addComponent(comboBoxSource, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(desitinationLabel)
                    .addComponent(comboBoxDest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(desitinationLabel1)
                    .addComponent(datePickerDepart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(departLabel)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(datePickerArrive, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(desitinationLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(departSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(arrivalSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(durationLabel)
                    .addComponent(durationTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(comboBoxAircraftName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtFlightCost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addComponent(createBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void flightNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flightNameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_flightNameTextFieldActionPerformed

    private void createBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createBtnActionPerformed
        // TODO add your handling code here:
        String flightName;
        String source;
        String destination;
        Date dateOfDeparture;
        Date dateOfArrival;
        Date departTime;
        Date arriveTime;
        int flightDuration;
        String aircraftName;
        float flightCost;
        SimpleDateFormat date = new SimpleDateFormat("EEE dd/MM/yyyy");
        SimpleDateFormat time = new SimpleDateFormat("HH:mm");
        
        //Flight Name
        flightName=flightNameTextField.getText();
        if(flightName.isEmpty()){
            JOptionPane.showMessageDialog(null, "Flight Name cannot be empty","Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if(atleastOneLetterValidation(flightName)){
            JOptionPane.showMessageDialog(null, "Please enter valid Fligh Name","Warning", JOptionPane.WARNING_MESSAGE);
            return;            
        }
        for(Flight f : flightdir.getFlightList()){
            if(f.getFlightName().equals(flightName)){
                JOptionPane.showMessageDialog(null, "Flight already exist","Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
        }
        
        //Airliner Name
        //airlinerName = (Airliner)airlinerNameCombo.getSelectedItem();
        
        //Source 
        source = (String) comboBoxSource.getSelectedItem();
        //Destination
        destination = (String) comboBoxDest.getSelectedItem();
        
        if(source.equalsIgnoreCase(destination)){
            JOptionPane.showMessageDialog(null,"Source and Destination cannot be same","Warning",JOptionPane.WARNING_MESSAGE);
            return;
        }
        //Date of Departure
        try{
            dateOfDeparture = datePickerDepart.getDate(); 
            if(dateOfDeparture.toString().isEmpty()){
                JOptionPane.showMessageDialog(null,"Please select Date of Departure","Warning",JOptionPane.WARNING_MESSAGE);
                return;
            }
            if(!DateValidation(date.format(datePickerDepart.getDate()))){
                JOptionPane.showMessageDialog(null,"Please enter Date of Departure in '<First three letters of day> dd/MM/yyyy' format","Warning",JOptionPane.WARNING_MESSAGE);
                return;
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null,"Please select Date of Departure","Warning",JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        //Date of Arrival
        try{
            dateOfArrival = datePickerArrive.getDate();
            if(dateOfArrival.toString().isEmpty()){
                JOptionPane.showMessageDialog(null,"Please select Date of Arrival","Warning",JOptionPane.WARNING_MESSAGE);
                return;
            } 
            if(!DateValidation(date.format(datePickerArrive.getDate()))){
                JOptionPane.showMessageDialog(null,"Please enter Date of Arrival in '<First three letters of day> dd/MM/yyyy' format","Warning",JOptionPane.WARNING_MESSAGE);
                return;
            }            
        }catch(Exception e){
            JOptionPane.showMessageDialog(null,"Please select Date of Arrival","Warning",JOptionPane.WARNING_MESSAGE);
            return;
        }
        if(dateOfDeparture.compareTo(dateOfArrival) > 0){
            JOptionPane.showMessageDialog(null,"Date of Arrival cannot be less than Date of Departure","Warning",JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        //Departure Time and Arrival Time
        if(departSpinner.getValue().toString().isEmpty()){
            JOptionPane.showMessageDialog(null,"Please enter Time of Departure","Warning",JOptionPane.WARNING_MESSAGE);
            return;
        }
        if(arrivalSpinner.getValue().toString().isEmpty()){
            JOptionPane.showMessageDialog(null,"Please enter Time of Arrival","Warning",JOptionPane.WARNING_MESSAGE);
            return;
        }
        if(!timeValidation(time.format(departSpinner.getValue()))){
            JOptionPane.showMessageDialog(null,"Please enter Departure Time in 'HH:mm' format","Warning",JOptionPane.WARNING_MESSAGE);
            return;
        }
        if(!timeValidation(time.format(arrivalSpinner.getValue()))){
            JOptionPane.showMessageDialog(null,"Please enter Arrival Time in 'HH:mm' format","Warning",JOptionPane.WARNING_MESSAGE);
            return;
        }        
        

        departTime = (Date) departSpinner.getValue();
        
        arriveTime = (Date) arrivalSpinner.getValue();
     
        try {
            departTime = time.parse(time.format(departTime));
            arriveTime = time.parse(time.format(arriveTime));
        } catch (ParseException ex) {
            Logger.getLogger(CreateAirlineFlightScheduleJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //Flight Duration
        if(durationTxtField.getText().isEmpty()){
            JOptionPane.showMessageDialog(null,"Flight duration cannot be empty ","Warning",JOptionPane.WARNING_MESSAGE);
            return;
        }
        try{
            flightDuration=Integer.parseInt(durationTxtField.getText());
        }catch(NumberFormatException e){
            JOptionPane.showMessageDialog(null,"Please enter a valid number for Flight Duration","Warning",JOptionPane.WARNING_MESSAGE);
            return;            
        }
        
        //Aircraft name
        aircraftName=(String) comboBoxAircraftName.getSelectedItem();
        
        //Flight cost
        if(txtFlightCost.getText().isEmpty()){
            JOptionPane.showMessageDialog(null,"Flight Cost cannot be empty ","Warning",JOptionPane.WARNING_MESSAGE);
            return;
        }
        try{
            flightCost = Float.parseFloat(txtFlightCost.getText());
        }catch(NumberFormatException e){
            JOptionPane.showMessageDialog(null,"Please enter valid Cost","Warning",JOptionPane.WARNING_MESSAGE);
            return;            
        }        
       
        Flight f1 = flightdir.createFlight();
        
        f1.setFlightName(flightName);
        f1.setAirlinerName(airliner);
        f1.setAircraftName(aircraftName);
        f1.setDestination(destination);
        f1.setSource(source);

        f1.setDate_of_Departure(dateOfDeparture);
        f1.setDate_of_arrival(dateOfArrival);
        f1.setArrival_time(arriveTime);
        f1.setDeparture_time(departTime);
        f1.setFlightDuration(flightDuration);
        f1.setFlightCost(flightCost);
        Vector<Vector<Boolean>> v = new Vector<Vector<Boolean>>();
        for(int i=0 ; i<25; i++){
            Vector<Boolean> vb = new Vector<Boolean>();
            vb.add(true);
            vb.add(true);
            vb.add(true);
            vb.add(true);
            vb.add(true);
            vb.add(true);
            v.add(vb);
        }
        f1.setSeats(v);

       
     
        JOptionPane.showMessageDialog(null, "Flight created successfully","Information", JOptionPane.INFORMATION_MESSAGE);
        flightNameTextField.setText("");
        txtFlightCost.setText("");
        datePickerArrive.setDate(null);
        datePickerDepart.setDate(null);
        durationTxtField.setText("");
        Date date1 = new Date();
        
        SpinnerDateModel sm = new SpinnerDateModel(date1, null, null, Calendar.HOUR_OF_DAY);
        departSpinner.setModel(sm);
        arrivalSpinner.setModel(sm);
    }//GEN-LAST:event_createBtnActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
        this.rightPanel.remove(this);
        
        for(Component comp : rightPanel.getComponents()){
            if(comp instanceof ManageAirlinerFlightScheduleJPanel){
                ManageAirlinerFlightScheduleJPanel manage = (ManageAirlinerFlightScheduleJPanel) comp;
                manage.populate(airliner);
            }
        }
        
        CardLayout layout = (CardLayout)this.rightPanel.getLayout();
        layout.previous(rightPanel);
        
    }//GEN-LAST:event_backBtnActionPerformed

    private void departSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_departSpinnerStateChanged
        // TODO add your handling code here:
        
    }//GEN-LAST:event_departSpinnerStateChanged

    private void btnLogOut2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogOut2ActionPerformed
        // TODO add your handling code here:
        for(Component comp : rightPanel.getComponents()){
            if(comp instanceof LoginScreen){

            } else{
                rightPanel.remove(comp);
            }
            CardLayout layout = (CardLayout)this.rightPanel.getLayout();
            layout.previous(rightPanel);
        }
        for(Component comp : jPanelLeft.getComponents()){
            if(comp instanceof JButton)
            comp.setVisible(false);
        }
    }//GEN-LAST:event_btnLogOut2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel airlinerLabel;
    private javax.swing.JSpinner arrivalSpinner;
    private javax.swing.JButton backBtn;
    private javax.swing.JButton btnLogOut2;
    private javax.swing.JComboBox<String> comboBoxAircraftName;
    private javax.swing.JComboBox<String> comboBoxDest;
    private javax.swing.JComboBox<String> comboBoxSource;
    private javax.swing.JButton createBtn;
    private org.jdesktop.swingx.JXDatePicker datePickerArrive;
    private org.jdesktop.swingx.JXDatePicker datePickerDepart;
    private javax.swing.JLabel departLabel;
    private javax.swing.JSpinner departSpinner;
    private javax.swing.JLabel desitinationLabel;
    private javax.swing.JLabel desitinationLabel1;
    private javax.swing.JLabel desitinationLabel2;
    private javax.swing.JLabel durationLabel;
    private javax.swing.JTextField durationTxtField;
    private javax.swing.JLabel flightNameLabel;
    private javax.swing.JTextField flightNameTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel lblAirlinerName;
    private javax.swing.JLabel sourceLabel;
    private javax.swing.JTextField txtFlightCost;
    // End of variables declaration//GEN-END:variables
}
