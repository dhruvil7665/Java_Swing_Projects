/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.ManageFlight;

import Business.Airliner.Airliner;
import Business.Flight.Flight;
import Business.Flight.FlightDirectory;
import UserInterface.LoginScreen;
import java.awt.CardLayout;
import java.awt.Component;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.SpinnerDateModel;

/**
 *
 * @author shahd
 */
public class ViewAirlinerFlightScheduleJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ViewAirlinerFlightScheduleJPanel
     */
     private JPanel rightPanel;
    private FlightDirectory flightdir;
    private Flight flight;

    private Airliner airliner;
    private String[] sourceList = {"Mumbai","Boston","New York","California","Chicago","New Jersey"};
    private String[] destinationList = {"Mumbai","Boston","New York","California","Chicago","New Jersey"};
   
      

    private JPanel jPanelLeft;
    public ViewAirlinerFlightScheduleJPanel(JPanel rightPanel,JPanel jPanelLeft,Flight flight , FlightDirectory flightDirectory,Airliner airliner) {
        this.jPanelLeft = jPanelLeft;
        this.rightPanel=rightPanel;
        this.flight=flight;
        this.flightdir=flightDirectory;
        this.airliner=airliner;
        initComponents();
        lblAirlinerName.setText(airliner.getAirlinerName());
      
        populateData();

    }

     public void populateData(){
         if(!airliner.getAirlinerAircraftName().isEmpty()){
            comboBoxAircraftName.removeAllItems();
            for(String aircraftName: airliner.getAirlinerAircraftName()){
                comboBoxAircraftName.addItem(aircraftName);
            }
        }
        if(sourceList.length > 0){
            comboBoxSource.removeAll();
            for(String source: sourceList){
                comboBoxSource.addItem(source);
            }
        }
        
        if(destinationList.length > 0){
            comboBoxDest.removeAll();
            for(String dest: destinationList){
                comboBoxDest.addItem(dest);
            }
        }
         
         
         
        flightNameTextField.setText(flight.getFlightName());
        comboBoxSource.setSelectedItem(flight.getSource());
        comboBoxDest.setSelectedItem(flight.getDestination());
        datePickerDepart.setDate(flight.getDate_of_departure());
        datePickerArrive.setDate(flight.getDate_of_arrival());
        durationTxtField.setText(String.valueOf(flight.getFlightDuration()));
        txtFlightCost.setText(String.valueOf(flight.getFlightCost()));
        comboBoxAircraftName.setSelectedItem(flight.getAircraftName());
        arrivalSpinner.setValue(flight.getArrival_time());
        departSpinner.setValue(flight.getDeparture_time());
        
        
        
       
//        if(airliner.getAirlinerAircraftName().isEmpty()){
//            System.out.println("empty");
//            return;
//        }
      
        
    }
      private boolean atleastOneLetterValidation(String input){
        Pattern p = Pattern.compile("^([^A-Za-z]+)$");
        Matcher m = p.matcher(input);
        boolean b = m.matches();
        return b;
    }
    
    private boolean phoneNumValidation(String input){
        Pattern p = Pattern.compile("^(\\d{10})$");
        Matcher m = p.matcher(input);
        boolean b = m.matches();
        return b;
    }
    private boolean timeValidation(String input){
        System.out.println(input);
        Pattern p = Pattern.compile("^\\d{2}:\\d{2}$");
        Matcher m = p.matcher(input);
        boolean b = m.matches();
        System.out.println(b);
        return b;
    }
    private boolean DateValidation(String input){
        Pattern p = Pattern.compile("^[A-Z][a-z][a-z]\\s\\d{2}/\\d{2}/\\d{4}$");
        Matcher m = p.matcher(input);
        boolean b = m.matches();
        return b;
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Date date = new Date();
        SpinnerDateModel sm =
        new SpinnerDateModel(date, null, null, Calendar.HOUR_OF_DAY);
        departSpinner = new javax.swing.JSpinner(sm);
        desitinationLabel2 = new javax.swing.JLabel();
        datePickerDepart = new org.jdesktop.swingx.JXDatePicker();
        jLabel1 = new javax.swing.JLabel();
        lblAirlinerName = new javax.swing.JLabel();
        flightNameLabel = new javax.swing.JLabel();
        SpinnerDateModel sm2 =
        new SpinnerDateModel(date, null, null, Calendar.HOUR_OF_DAY);
        arrivalSpinner = new javax.swing.JSpinner(sm2);
        comboBoxAircraftName = new javax.swing.JComboBox<>();
        airlinerLabel = new javax.swing.JLabel();
        durationLabel = new javax.swing.JLabel();
        flightNameTextField = new javax.swing.JTextField();
        durationTxtField = new javax.swing.JTextField();
        sourceLabel = new javax.swing.JLabel();
        desitinationLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        comboBoxSource = new javax.swing.JComboBox<>();
        backBtn = new javax.swing.JButton();
        comboBoxDest = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        desitinationLabel1 = new javax.swing.JLabel();
        txtFlightCost = new javax.swing.JTextField();
        departLabel = new javax.swing.JLabel();
        datePickerArrive = new org.jdesktop.swingx.JXDatePicker();
        btnSave = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        btnLogOut2 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();

        JSpinner.DateEditor de = new JSpinner.DateEditor(departSpinner, "HH:mm");
        departSpinner.setEditor(de);
        departSpinner.setEnabled(false);
        departSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                departSpinnerStateChanged(evt);
            }
        });

        desitinationLabel2.setText("Date of Arrival");

        datePickerDepart.setEnabled(false);
        datePickerDepart.setFocusable(false);

        jLabel1.setText("Arrival Time");

        flightNameLabel.setText("Flight Name");

        JSpinner.DateEditor de2 = new JSpinner.DateEditor(arrivalSpinner, "HH:mm");
        arrivalSpinner.setEditor(de2);
        arrivalSpinner.setEnabled(false);

        comboBoxAircraftName.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboBoxAircraftName.setEnabled(false);

        airlinerLabel.setText("Airliner Name");

        durationLabel.setText("Flight Duration in Hrs");

        flightNameTextField.setEnabled(false);
        flightNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flightNameTextFieldActionPerformed(evt);
            }
        });

        durationTxtField.setEnabled(false);

        sourceLabel.setText("Source City");

        desitinationLabel.setText("Destination City");

        jLabel3.setText("Aircraft Name");

        comboBoxSource.setEnabled(false);

        backBtn.setText("<<Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        comboBoxDest.setEnabled(false);

        jLabel2.setText("Flight Cost");

        desitinationLabel1.setText("Date of Departure");

        txtFlightCost.setEnabled(false);

        departLabel.setText("Departure Time");

        datePickerArrive.setEnabled(false);
        datePickerArrive.setFocusable(false);

        btnSave.setText("Save");
        btnSave.setEnabled(false);
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        jLabel4.setText("View Flight Schedule Details");

        btnLogOut2.setText("Log Out");
        btnLogOut2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogOut2ActionPerformed(evt);
            }
        });

        jLabel5.setText("admin");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(170, 170, 170)
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(61, 61, 61)
                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(118, 118, 118)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(desitinationLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(desitinationLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(desitinationLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(flightNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(airlinerLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(sourceLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(departLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(durationLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(datePickerArrive, javax.swing.GroupLayout.DEFAULT_SIZE, 372, Short.MAX_VALUE)
                            .addComponent(datePickerDepart, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(comboBoxDest, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(comboBoxSource, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblAirlinerName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(durationTxtField, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(comboBoxAircraftName, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtFlightCost, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(flightNameTextField, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(departSpinner)
                            .addComponent(arrivalSpinner, javax.swing.GroupLayout.Alignment.LEADING)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(92, 92, 92)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(66, 66, 66)
                        .addComponent(jLabel5)
                        .addGap(2, 2, 2)
                        .addComponent(btnLogOut2, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(39, 39, 39))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnLogOut2, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(backBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(flightNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
                    .addComponent(flightNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblAirlinerName, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                    .addComponent(airlinerLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sourceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(comboBoxSource, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(desitinationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBoxDest, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(datePickerDepart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(desitinationLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(datePickerArrive, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(desitinationLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(departSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(departLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(arrivalSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(durationTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(durationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(comboBoxAircraftName, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtFlightCost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel2))
                .addGap(46, 46, 46))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void departSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_departSpinnerStateChanged
        // TODO add your handling code here:

    }//GEN-LAST:event_departSpinnerStateChanged

    private void flightNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flightNameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_flightNameTextFieldActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
        this.rightPanel.remove(this);
        CardLayout layout = (CardLayout)this.rightPanel.getLayout();
        layout.previous(rightPanel);
        for(Component comp : rightPanel.getComponents()){
            if(comp instanceof ManageAirlinerFlightScheduleJPanel){
                ManageAirlinerFlightScheduleJPanel manage = (ManageAirlinerFlightScheduleJPanel) comp;
                manage.populate(airliner);
            }
        }

    }//GEN-LAST:event_backBtnActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        
        flightNameTextField.setEnabled(true);
        comboBoxAircraftName.setEnabled(true);
        comboBoxSource.setEnabled(true);
        comboBoxDest.setEnabled(true);
        datePickerDepart.setEnabled(true);
        datePickerArrive.setEnabled(true);
        arrivalSpinner.setEnabled(true);
        departSpinner.setEnabled(true);
        txtFlightCost.setEnabled(true);
        durationTxtField.setEnabled(true);
        btnSave.setEnabled(true);
        btnUpdate.setEnabled(false);
        
        
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        
        String flightName;
        String source;
        String destination;
        Date dateOfDeparture;
        Date dateOfArrival;
        Date departTime;
        Date arriveTime;
        int flightDuration;
        String aircraftName;
        float flightCost;
        SimpleDateFormat date = new SimpleDateFormat("EEE dd/MM/yyyy");
        SimpleDateFormat time = new SimpleDateFormat("HH:mm");
        
        //Flight Name
        flightName=flightNameTextField.getText();
        if(flightName.isEmpty()){
            JOptionPane.showMessageDialog(null, "Flight Name cannot be empty","Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if(atleastOneLetterValidation(flightName)){
            JOptionPane.showMessageDialog(null, "Please enter valid Fligh Name","Warning", JOptionPane.WARNING_MESSAGE);
            return;            
        }
        
        //Airliner Name
        //airlinerName = (Airliner)airlinerNameCombo.getSelectedItem();
        
        //Source 
        source = (String) comboBoxSource.getSelectedItem();
        //Destination
        destination = (String) comboBoxDest.getSelectedItem();
        
        if(source.equalsIgnoreCase(destination)){
            JOptionPane.showMessageDialog(null,"Source and Destination cannot be same","Warning",JOptionPane.WARNING_MESSAGE);
            return;
        }
        //Date of Departure
        try{
            dateOfDeparture = datePickerDepart.getDate(); 
            if(dateOfDeparture.toString().isEmpty()){
                JOptionPane.showMessageDialog(null,"Please select Date of Departure","Warning",JOptionPane.WARNING_MESSAGE);
                return;
            }
            if(!DateValidation(date.format(datePickerDepart.getDate()))){
                JOptionPane.showMessageDialog(null,"Please enter Date of Departure in '<First three letters of day> dd/MM/yyyy' format","Warning",JOptionPane.WARNING_MESSAGE);
                return;
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null,"Please select Date of Departure","Warning",JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        //Date of Arrival
        try{
            dateOfArrival = datePickerArrive.getDate();
            if(dateOfArrival.toString().isEmpty()){
                JOptionPane.showMessageDialog(null,"Please select Date of Arrival","Warning",JOptionPane.WARNING_MESSAGE);
                return;
            } 
            if(!DateValidation(date.format(datePickerArrive.getDate()))){
                JOptionPane.showMessageDialog(null,"Please enter Date of Arrival in '<First three letters of day> dd/MM/yyyy' format","Warning",JOptionPane.WARNING_MESSAGE);
                return;
            }            
        }catch(Exception e){
            JOptionPane.showMessageDialog(null,"Please select Date of Arrival","Warning",JOptionPane.WARNING_MESSAGE);
            return;
        }
        if(dateOfDeparture.compareTo(dateOfArrival) > 0){
            JOptionPane.showMessageDialog(null,"Date of Arrival cannot be less than Date of Departure","Warning",JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        //Departure Time and Arrival Time
        if(departSpinner.getValue().toString().isEmpty()){
            JOptionPane.showMessageDialog(null,"Please enter Time of Departure","Warning",JOptionPane.WARNING_MESSAGE);
            return;
        }
        if(arrivalSpinner.getValue().toString().isEmpty()){
            JOptionPane.showMessageDialog(null,"Please enter Time of Arrival","Warning",JOptionPane.WARNING_MESSAGE);
            return;
        }
        if(!timeValidation(time.format(departSpinner.getValue()))){
            JOptionPane.showMessageDialog(null,"Please enter Departure Time in 'HH:mm' format","Warning",JOptionPane.WARNING_MESSAGE);
            return;
        }
        if(!timeValidation(time.format(arrivalSpinner.getValue()))){
            JOptionPane.showMessageDialog(null,"Please enter Arrival Time in 'HH:mm' format","Warning",JOptionPane.WARNING_MESSAGE);
            return;
        }        
        

        departTime = (Date) departSpinner.getValue();
        
        arriveTime = (Date) arrivalSpinner.getValue();
     
        try {
            departTime = time.parse(time.format(departTime));
            arriveTime = time.parse(time.format(arriveTime));
        } catch (ParseException ex) {
            Logger.getLogger(CreateAirlineFlightScheduleJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //Flight Duration
        if(durationTxtField.getText().isEmpty()){
            JOptionPane.showMessageDialog(null,"Flight duration cannot be empty ","Warning",JOptionPane.WARNING_MESSAGE);
            return;
        }
        try{
            flightDuration=Integer.parseInt(durationTxtField.getText());
        }catch(NumberFormatException e){
            JOptionPane.showMessageDialog(null,"Please enter a valid number for Flight Duration","Warning",JOptionPane.WARNING_MESSAGE);
            return;            
        }
        
        //Aircraft name
        aircraftName=(String) comboBoxAircraftName.getSelectedItem();
        
        //Flight cost
        if(txtFlightCost.getText().isEmpty()){
            JOptionPane.showMessageDialog(null,"Flight Cost cannot be empty ","Warning",JOptionPane.WARNING_MESSAGE);
            return;
        }
        try{
            flightCost = Float.parseFloat(txtFlightCost.getText());
        }catch(NumberFormatException e){
            JOptionPane.showMessageDialog(null,"Please enter valid Cost","Warning",JOptionPane.WARNING_MESSAGE);
            return;            
        }        
       
       
        
        flight.setFlightName(flightName);
        flight.setAirlinerName(airliner);
        flight.setAircraftName(aircraftName);
        flight.setDestination(destination);
        flight.setSource(source);

        flight.setDate_of_Departure(dateOfDeparture);
        flight.setDate_of_arrival(dateOfArrival);
        flight.setArrival_time(arriveTime);
        flight.setDeparture_time(departTime);
        flight.setFlightDuration(flightDuration);
        flight.setFlightCost(flightCost);
        

       
     
        JOptionPane.showMessageDialog(null, "Flight Updated successfully","Information", JOptionPane.INFORMATION_MESSAGE);
       
          flightNameTextField.setEnabled(false);
        comboBoxAircraftName.setEnabled(false);
        comboBoxSource.setEnabled(false);
        comboBoxDest.setEnabled(false);
        datePickerDepart.setEnabled(false);
        datePickerArrive.setEnabled(false);
        arrivalSpinner.setEnabled(false);
        departSpinner.setEnabled(false);
        txtFlightCost.setEnabled(false);
        durationTxtField.setEnabled(false);
        btnSave.setEnabled(false);
        btnUpdate.setEnabled(true);
    
        
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnLogOut2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogOut2ActionPerformed
        // TODO add your handling code here:
        for(Component comp : rightPanel.getComponents()){
            if(comp instanceof LoginScreen){

            } else{
                rightPanel.remove(comp);
            }
            CardLayout layout = (CardLayout)this.rightPanel.getLayout();
            layout.previous(rightPanel);
        }
        for(Component comp : jPanelLeft.getComponents()){
            if(comp instanceof JButton)
            comp.setVisible(false);
        }
    }//GEN-LAST:event_btnLogOut2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel airlinerLabel;
    private javax.swing.JSpinner arrivalSpinner;
    private javax.swing.JButton backBtn;
    private javax.swing.JButton btnLogOut2;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> comboBoxAircraftName;
    private javax.swing.JComboBox<String> comboBoxDest;
    private javax.swing.JComboBox<String> comboBoxSource;
    private org.jdesktop.swingx.JXDatePicker datePickerArrive;
    private org.jdesktop.swingx.JXDatePicker datePickerDepart;
    private javax.swing.JLabel departLabel;
    private javax.swing.JSpinner departSpinner;
    private javax.swing.JLabel desitinationLabel;
    private javax.swing.JLabel desitinationLabel1;
    private javax.swing.JLabel desitinationLabel2;
    private javax.swing.JLabel durationLabel;
    private javax.swing.JTextField durationTxtField;
    private javax.swing.JLabel flightNameLabel;
    private javax.swing.JTextField flightNameTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel lblAirlinerName;
    private javax.swing.JLabel sourceLabel;
    private javax.swing.JTextField txtFlightCost;
    // End of variables declaration//GEN-END:variables
}
