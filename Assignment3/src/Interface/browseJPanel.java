/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface;

import Business.Car;
import Business.CarCatalog;
import java.awt.CardLayout;
import java.awt.Component;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author shahd
 */

public class browseJPanel extends javax.swing.JPanel {

    /**
     * Creates new form browseJPanel
     */
   private JPanel rightPanel;
   private CarCatalog carCatalog;
   DefaultTableModel dtm;
   public browseJPanel(JPanel rightPanel, CarCatalog carCatalog) {
        initComponents();
        this.rightPanel=rightPanel;
        this.carCatalog=carCatalog;
       
       
        brandFT.setEnabled(false);
        cityButton.setEnabled(false);
        carFT.setEnabled(false);
        manuYearFT.setEnabled(false);
        maxFT.setEnabled(false);
        minFT.setEnabled(false);
        certiFT.setEnabled(false);
        yesRadio.setEnabled(false);
        noRadio.setEnabled(false);
        modelFT.setEnabled(false);
        serialFT.setEnabled(false);
        manufactureFT.setEnabled(false);
        expireCheckbox.setEnabled(false);
       
        populate(carCatalog);
    }

   
   
   public void populate(CarCatalog carCatalog){
         dtm = (DefaultTableModel)carTable.getModel();
         dtm.setRowCount(0);
         
        for(Car c : carCatalog.getCarCatalog()){
               
            Object[] row = new Object[dtm.getColumnCount()];
            row[0]=c;
            row[1]=c.getAvailble_city();
            row[2]=c.getCar_Type();
            row[3]=c.getManufacture();
            row[4]=c.getManufactured_year();
            row[5]=c.getMax_seats();
            row[6]=c.getMin_seats();
            row[7]=c.isMaintenance_certificate();
            row[8]=c.isAvailable();
            row[9]=c.getModel_num();
            row[10]=c.getSerial_num();
            dtm.addRow(row);
            
        }
        
        
       
         latestUpdateLabel.setText("Latest Updated on  "+CarCatalog.getLatestUpdate());
         availcarsLabel.setText("Total Cars Available: "+availableCars());
         notAvail.setText("Total Cars NotAvailable: "+notAvailableCars());
   }
          
   
   /*private void filter(String searchQuery){
        dtm = (DefaultTableModel)carTable.getModel();
        TableRowSorter<DefaultTableModel> tr=new TableRowSorter<DefaultTableModel>(dtm);
        carTable.setRowSorter(tr);
        
        tr.setRowFilter(RowFilter.regexFilter(searchQuery));
   
   }*/
    
   
   public int availableCars(){
   int count=0;
   for(Car c : carCatalog.getCarCatalog()){
   if(c.isAvailable()){
       count=count+1;
       
   }
       
  
   }
       
       return count;
   }
   
     public int notAvailableCars(){
   int count=0;
   for(Car c : carCatalog.getCarCatalog()){
   if(!c.isAvailable()){
       count=count+1;
       
   }
       
  
   }
       
       return count;
   }
   
   
   
   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        carTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        brandButton = new javax.swing.JButton();
        city = new javax.swing.JButton();
        brandFT = new javax.swing.JTextField();
        carTypeButton = new javax.swing.JButton();
        cityButton = new javax.swing.JTextField();
        carFT = new javax.swing.JComboBox<>();
        manuFButton = new javax.swing.JButton();
        manuYearFT = new javax.swing.JTextField();
        maxButton = new javax.swing.JButton();
        maxFT = new javax.swing.JSpinner();
        minButton = new javax.swing.JButton();
        minFT = new javax.swing.JSpinner();
        certificateButton = new javax.swing.JButton();
        certiFT = new javax.swing.JCheckBox();
        availButton = new javax.swing.JButton();
        yesRadio = new javax.swing.JRadioButton();
        noRadio = new javax.swing.JRadioButton();
        modelButton = new javax.swing.JButton();
        modelFT = new javax.swing.JTextField();
        serialButton = new javax.swing.JButton();
        serialFT = new javax.swing.JTextField();
        manufactureButton = new javax.swing.JButton();
        manufactureFT = new javax.swing.JTextField();
        viewButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        latestUpdateLabel = new javax.swing.JLabel();
        availcarsLabel = new javax.swing.JLabel();
        notAvail = new javax.swing.JLabel();
        expireCheckbox = new javax.swing.JCheckBox();

        setBackground(new java.awt.Color(204, 204, 255));
        setPreferredSize(new java.awt.Dimension(1465, 1993));

        carTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Brand", "City", "Car_Type", "Manufacturer", "Manufactured Year", "Max Seats", "Min Seats", "Certificate Available", "Car Available", "Model Number", "Serial Number"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(carTable);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 0, 255));
        jLabel1.setText("Filter By");

        brandButton.setText("Brand");
        brandButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                brandButtonActionPerformed(evt);
            }
        });

        city.setText("City");
        city.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cityActionPerformed(evt);
            }
        });

        brandFT.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                brandFTKeyReleased(evt);
            }
        });

        carTypeButton.setText("Car_Type");
        carTypeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                carTypeButtonActionPerformed(evt);
            }
        });

        cityButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cityButtonKeyReleased(evt);
            }
        });

        carFT.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sedan", "SUV", "Hatchback", "SportsCar", " " }));
        carFT.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                carFTItemStateChanged(evt);
            }
        });

        manuFButton.setText("Manufacture Year");
        manuFButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manuFButtonActionPerformed(evt);
            }
        });

        manuYearFT.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                manuYearFTKeyReleased(evt);
            }
        });

        maxButton.setText("Max Seats");
        maxButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxButtonActionPerformed(evt);
            }
        });

        maxFT.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                maxFTStateChanged(evt);
            }
        });

        minButton.setText("Min Seats");
        minButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minButtonActionPerformed(evt);
            }
        });

        minFT.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                minFTStateChanged(evt);
            }
        });

        certificateButton.setText("Certificate");
        certificateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                certificateButtonActionPerformed(evt);
            }
        });

        certiFT.setText("Not Expired");
        certiFT.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                certiFTItemStateChanged(evt);
            }
        });

        availButton.setText("Availability");
        availButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                availButtonActionPerformed(evt);
            }
        });

        yesRadio.setText("Yes");
        yesRadio.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                yesRadioItemStateChanged(evt);
            }
        });

        noRadio.setText("No");
        noRadio.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                noRadioItemStateChanged(evt);
            }
        });

        modelButton.setText("Model_Num");
        modelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modelButtonActionPerformed(evt);
            }
        });

        modelFT.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                modelFTKeyReleased(evt);
            }
        });

        serialButton.setText("Serial_Num");
        serialButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serialButtonActionPerformed(evt);
            }
        });

        serialFT.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                serialFTKeyReleased(evt);
            }
        });

        manufactureButton.setText("Manufacturer");
        manufactureButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manufactureButtonActionPerformed(evt);
            }
        });

        manufactureFT.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                manufactureFTKeyReleased(evt);
            }
        });

        viewButton.setText("View Details");
        viewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete Entry");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        backButton.setText("<<BACK");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        latestUpdateLabel.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N

        availcarsLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        notAvail.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        expireCheckbox.setText("Expired");
        expireCheckbox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                expireCheckboxItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(brandFT)
                            .addComponent(brandButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cityButton)
                            .addComponent(city, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(carTypeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(carFT, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(manufactureFT)
                            .addComponent(manufactureButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(manuFButton)
                                .addGap(29, 29, 29)
                                .addComponent(maxButton))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(manuYearFT, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(36, 36, 36)
                                .addComponent(maxFT, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(minButton)
                            .addComponent(minFT, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(certificateButton)
                                .addGap(18, 18, 18)
                                .addComponent(availButton, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(expireCheckbox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(certiFT, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addComponent(yesRadio)
                                .addGap(18, 18, 18)
                                .addComponent(noRadio)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(modelFT, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(modelButton))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(serialButton)
                            .addComponent(serialFT, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1296, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(latestUpdateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(availcarsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(viewButton)
                                            .addComponent(deleteButton)
                                            .addComponent(backButton))
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(notAvail, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap())))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(brandButton)
                    .addComponent(city)
                    .addComponent(carTypeButton)
                    .addComponent(manuFButton)
                    .addComponent(maxButton)
                    .addComponent(minButton)
                    .addComponent(certificateButton)
                    .addComponent(availButton)
                    .addComponent(serialButton)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(modelButton)
                    .addComponent(manufactureButton))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(brandFT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cityButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(carFT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(certiFT)
                    .addComponent(yesRadio)
                    .addComponent(noRadio)
                    .addComponent(modelFT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(serialFT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(manuYearFT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maxFT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(minFT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(manufactureFT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(148, 148, 148)
                        .addComponent(viewButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(deleteButton)
                        .addGap(18, 18, 18)
                        .addComponent(backButton)
                        .addGap(56, 56, 56)
                        .addComponent(latestUpdateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(notAvail, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(expireCheckbox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(12, 12, 12)
                .addComponent(availcarsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(1437, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void brandFTKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_brandFTKeyReleased
        // TODO add your handling code here:
        String result=brandFT.getText();
        dtm = (DefaultTableModel)carTable.getModel();
        dtm.setRowCount(0);
        for(Car c : carCatalog.getCarCatalog()){
            if(c.getBrand().equalsIgnoreCase(result)||result.isEmpty()){   
            Object[] row = new Object[dtm.getColumnCount()];
            row[0]=c;
            row[1]=c.getAvailble_city();
            row[2]=c.getCar_Type();
            row[3]=c.getManufacture();
            row[4]=c.getManufactured_year();
            row[5]=c.getMax_seats();
            row[6]=c.getMin_seats();
            row[7]=c.isMaintenance_certificate();
            row[8]=c.isAvailable();
            row[9]=c.getModel_num();
            row[10]=c.getSerial_num();
            dtm.addRow(row);
            }
        }
    }//GEN-LAST:event_brandFTKeyReleased

    private void brandButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_brandButtonActionPerformed
        // TODO add your handling code here:
        brandFT.setEnabled(false);
        cityButton.setEnabled(false);
        carFT.setEnabled(false);
        manuYearFT.setEnabled(false);
        maxFT.setEnabled(false);
        minFT.setEnabled(false);
        certiFT.setEnabled(false);
        yesRadio.setEnabled(false);
        noRadio.setEnabled(false);
        modelFT.setEnabled(false);
        serialFT.setEnabled(false);
        brandFT.setEnabled(true);
        manufactureFT.setEnabled(false);
       
        
        
    }//GEN-LAST:event_brandButtonActionPerformed

    private void cityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cityActionPerformed
        // TODO add your handling code here:
        brandFT.setEnabled(false);
        cityButton.setEnabled(true);
        carFT.setEnabled(false);
        manuYearFT.setEnabled(false);
        maxFT.setEnabled(false);
        minFT.setEnabled(false);
        certiFT.setEnabled(false);
        yesRadio.setEnabled(false);
        noRadio.setEnabled(false);
        modelFT.setEnabled(false);
        serialFT.setEnabled(false);
        manufactureFT.setEnabled(false);
        
    }//GEN-LAST:event_cityActionPerformed

    private void carTypeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_carTypeButtonActionPerformed
        // TODO add your handling code here:
        brandFT.setEnabled(false);
        cityButton.setEnabled(false);
        carFT.setEnabled(true);
        manuYearFT.setEnabled(false);
        maxFT.setEnabled(false);
        minFT.setEnabled(false);
        certiFT.setEnabled(false);
        yesRadio.setEnabled(false);
        noRadio.setEnabled(false);
        modelFT.setEnabled(false);
        serialFT.setEnabled(false);
        manufactureFT.setEnabled(false);
    }//GEN-LAST:event_carTypeButtonActionPerformed

    private void manuFButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manuFButtonActionPerformed
        // TODO add your handling code here:
        brandFT.setEnabled(false);
        cityButton.setEnabled(false);
        carFT.setEnabled(false);
        manuYearFT.setEnabled(true);
        maxFT.setEnabled(false);
        minFT.setEnabled(false);
        certiFT.setEnabled(false);
        yesRadio.setEnabled(false);
        noRadio.setEnabled(false);
        modelFT.setEnabled(false);
        serialFT.setEnabled(false);
        manufactureFT.setEnabled(false);
        
    }//GEN-LAST:event_manuFButtonActionPerformed

    private void maxButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxButtonActionPerformed
        // TODO add your handling code here:
        brandFT.setEnabled(false);
        cityButton.setEnabled(false);
        carFT.setEnabled(false);
        manuYearFT.setEnabled(false);
        maxFT.setEnabled(true);
        minFT.setEnabled(false);
        certiFT.setEnabled(false);
        yesRadio.setEnabled(false);
        noRadio.setEnabled(false);
        modelFT.setEnabled(false);
        serialFT.setEnabled(false);
        manufactureFT.setEnabled(false);
    }//GEN-LAST:event_maxButtonActionPerformed

    private void minButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minButtonActionPerformed
        // TODO add your handling code here:
        brandFT.setEnabled(false);
        cityButton.setEnabled(false);
        carFT.setEnabled(false);
        manuYearFT.setEnabled(false);
        maxFT.setEnabled(false);
        minFT.setEnabled(true);
        certiFT.setEnabled(false);
        yesRadio.setEnabled(false);
        noRadio.setEnabled(false);
        modelFT.setEnabled(false);
        serialFT.setEnabled(false);
        manufactureFT.setEnabled(false);
        
    }//GEN-LAST:event_minButtonActionPerformed

    private void certificateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_certificateButtonActionPerformed
        // TODO add your handling code here:
        brandFT.setEnabled(false);
        cityButton.setEnabled(false);
        carFT.setEnabled(false);
        manuYearFT.setEnabled(false);
        maxFT.setEnabled(false);
        minFT.setEnabled(false);
        certiFT.setEnabled(true);
        yesRadio.setEnabled(false);
        noRadio.setEnabled(false);
        modelFT.setEnabled(false);
        serialFT.setEnabled(false);
        manufactureFT.setEnabled(false);
        expireCheckbox.setEnabled(true);
    }//GEN-LAST:event_certificateButtonActionPerformed

    private void availButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_availButtonActionPerformed
        // TODO add your handling code here:
        
        brandFT.setEnabled(false);
        cityButton.setEnabled(false);
        carFT.setEnabled(false);
        manuYearFT.setEnabled(false);
        maxFT.setEnabled(false);
        minFT.setEnabled(false);
        certiFT.setEnabled(false);
        yesRadio.setEnabled(true);
        noRadio.setEnabled(true);
        modelFT.setEnabled(false);
        serialFT.setEnabled(false);
        manufactureFT.setEnabled(false);
    }//GEN-LAST:event_availButtonActionPerformed

    private void modelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modelButtonActionPerformed
        // TODO add your handling code here:
        
        brandFT.setEnabled(false);
        cityButton.setEnabled(false);
        carFT.setEnabled(false);
        manuYearFT.setEnabled(false);
        maxFT.setEnabled(false);
        minFT.setEnabled(false);
        certiFT.setEnabled(false);
        yesRadio.setEnabled(false);
        noRadio.setEnabled(false);
        modelFT.setEnabled(true);
        serialFT.setEnabled(false);
        manufactureFT.setEnabled(false);
    }//GEN-LAST:event_modelButtonActionPerformed

    private void serialButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serialButtonActionPerformed
        // TODO add your handling code here:
        brandFT.setEnabled(false);
        cityButton.setEnabled(false);
        carFT.setEnabled(false);
        manuYearFT.setEnabled(false);
        maxFT.setEnabled(false);
        minFT.setEnabled(false);
        certiFT.setEnabled(false);
        yesRadio.setEnabled(false);
        noRadio.setEnabled(false);
        modelFT.setEnabled(false);
        serialFT.setEnabled(true);
        manufactureFT.setEnabled(false);
        
    }//GEN-LAST:event_serialButtonActionPerformed

    private void cityButtonKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cityButtonKeyReleased
        // TODO add your handling code here:
        
       String result=cityButton.getText();
        dtm = (DefaultTableModel)carTable.getModel();
        dtm.setRowCount(0);
        for(Car c : carCatalog.getCarCatalog()){
            if(c.getAvailble_city().equalsIgnoreCase(result)||cityButton.getText().isEmpty()){   
            Object[] row = new Object[dtm.getColumnCount()];
            row[0]=c;
            row[1]=c.getAvailble_city();
            row[2]=c.getCar_Type();
            row[3]=c.getManufacture();
            row[4]=c.getManufactured_year();
            row[5]=c.getMax_seats();
            row[6]=c.getMin_seats();
            row[7]=c.isMaintenance_certificate();
            row[8]=c.isAvailable();
            row[9]=c.getModel_num();
            row[10]=c.getSerial_num();
            dtm.addRow(row);
            }
        }
    }//GEN-LAST:event_cityButtonKeyReleased

    private void manuYearFTKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_manuYearFTKeyReleased
        // TODO add your handling code here:
        int result=0;
        try{
        result=Integer.parseInt(manuYearFT.getText());
        }catch(NumberFormatException e){
            System.out.println("");
        }
        dtm = (DefaultTableModel)carTable.getModel();
        dtm.setRowCount(0);
        for(Car c : carCatalog.getCarCatalog()){
            if(c.getManufactured_year()==result||manuYearFT.getText().isEmpty()){   
            Object[] row = new Object[dtm.getColumnCount()];
            row[0]=c;
            row[1]=c.getAvailble_city();
            row[2]=c.getCar_Type();
            row[3]=c.getManufacture();
            row[4]=c.getManufactured_year();
            row[5]=c.getMax_seats();
            row[6]=c.getMin_seats();
            row[7]=c.isMaintenance_certificate();
            row[8]=c.isAvailable();
            row[9]=c.getModel_num();
            row[10]=c.getSerial_num();
            dtm.addRow(row);
            }
        }
    }//GEN-LAST:event_manuYearFTKeyReleased

    private void certiFTItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_certiFTItemStateChanged
        // TODO add your handling code here:
        
        Boolean result=certiFT.isSelected();
        dtm = (DefaultTableModel)carTable.getModel();
        dtm.setRowCount(0);
        if(result){
        for(Car c : carCatalog.getCarCatalog()){
            if(c.isMaintenance_certificate()){   
            Object[] row = new Object[dtm.getColumnCount()];
            row[0]=c;
            row[1]=c.getAvailble_city();
            row[2]=c.getCar_Type();
            row[3]=c.getManufacture();
            row[4]=c.getManufactured_year();
            row[5]=c.getMax_seats();
            row[6]=c.getMin_seats();
            row[7]=c.isMaintenance_certificate();
            row[8]=c.isAvailable();
            row[9]=c.getModel_num();
            row[10]=c.getSerial_num();
            dtm.addRow(row);
            }
        }
        }
        else{
            populate(carCatalog);
        }
    }//GEN-LAST:event_certiFTItemStateChanged

    private void yesRadioItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_yesRadioItemStateChanged
        // TODO add your handling code here:
        noRadio.setEnabled(false);
        Boolean result=yesRadio.isSelected();
        dtm = (DefaultTableModel)carTable.getModel();
        dtm.setRowCount(0);
        if(result){
        for(Car c : carCatalog.getCarCatalog()){
            if(c.isAvailable()){   
            Object[] row = new Object[dtm.getColumnCount()];
            row[0]=c;
            row[1]=c.getAvailble_city();
            row[2]=c.getCar_Type();
            row[3]=c.getManufacture();
            row[4]=c.getManufactured_year();
            row[5]=c.getMax_seats();
            row[6]=c.getMin_seats();
            row[7]=c.isMaintenance_certificate();
            row[8]=c.isAvailable();
            row[9]=c.getModel_num();
            row[10]=c.getSerial_num();
            dtm.addRow(row);
            }
        }
        }
        else{
            populate(carCatalog);
        }
        
        
    }//GEN-LAST:event_yesRadioItemStateChanged

    private void noRadioItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_noRadioItemStateChanged
        // TODO add your handling code here:
        yesRadio.setEnabled(false);
        Boolean result=noRadio.isSelected();
        dtm = (DefaultTableModel)carTable.getModel();
        dtm.setRowCount(0);
        if(result){
        for(Car c : carCatalog.getCarCatalog()){
            if(!c.isAvailable()){   
            Object[] row = new Object[dtm.getColumnCount()];
            row[0]=c;
            row[1]=c.getAvailble_city();
            row[2]=c.getCar_Type();
            row[3]=c.getManufacture();
            row[4]=c.getManufactured_year();
            row[5]=c.getMax_seats();
            row[6]=c.getMin_seats();
            row[7]=c.isMaintenance_certificate();
            row[8]=c.isAvailable();
            row[9]=c.getModel_num();
            row[10]=c.getSerial_num();
            dtm.addRow(row);
            }
        }
        }
        else{
            populate(carCatalog);
        }
        
    }//GEN-LAST:event_noRadioItemStateChanged

    private void modelFTKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_modelFTKeyReleased
        // TODO add your handling code here:
        String result=modelFT.getText();
        dtm = (DefaultTableModel)carTable.getModel();
        dtm.setRowCount(0);
        for(Car c : carCatalog.getCarCatalog()){
            if(c.getModel_num().equalsIgnoreCase(result)||result.isEmpty()){   
            Object[] row = new Object[dtm.getColumnCount()];
            row[0]=c;
            row[1]=c.getAvailble_city();
            row[2]=c.getCar_Type();
            row[3]=c.getManufacture();
            row[4]=c.getManufactured_year();
            row[5]=c.getMax_seats();
            row[6]=c.getMin_seats();
            row[7]=c.isMaintenance_certificate();
            row[8]=c.isAvailable();
            row[9]=c.getModel_num();
            row[10]=c.getSerial_num();
            dtm.addRow(row);
            }
        }
    }//GEN-LAST:event_modelFTKeyReleased

    private void serialFTKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_serialFTKeyReleased
        // TODO add your handling code here:
        
        int result=0;
        try{
        result=Integer.parseInt(serialFT.getText());
             }catch(NumberFormatException e){
            System.out.println("");}
        dtm = (DefaultTableModel)carTable.getModel();
        dtm.setRowCount(0);
        for(Car c : carCatalog.getCarCatalog()){
            if(c.getSerial_num()==result||serialFT.getText().isEmpty()){   
            Object[] row = new Object[dtm.getColumnCount()];
            row[0]=c;
            row[1]=c.getAvailble_city();
            row[2]=c.getCar_Type();
            row[3]=c.getManufacture();
            row[4]=c.getManufactured_year();
            row[5]=c.getMax_seats();
            row[6]=c.getMin_seats();
            row[7]=c.isMaintenance_certificate();
            row[8]=c.isAvailable();
            row[9]=c.getModel_num();
            row[10]=c.getSerial_num();
            dtm.addRow(row);
            }
        }
    }//GEN-LAST:event_serialFTKeyReleased

    private void carFTItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_carFTItemStateChanged
        // TODO add your handling code here:
        String result=(String)carFT.getSelectedItem();
        System.out.println(result);
        dtm = (DefaultTableModel)carTable.getModel();
        dtm.setRowCount(0);
       
        for(Car c : carCatalog.getCarCatalog()){
            if(c.getCar_Type().equalsIgnoreCase(result)||result.isEmpty()){   
            Object[] row = new Object[dtm.getColumnCount()];
            row[0]=c;
            row[1]=c.getAvailble_city();
            row[2]=c.getCar_Type();
            row[3]=c.getManufacture();
            row[4]=c.getManufactured_year();
            row[5]=c.getMax_seats();
            row[6]=c.getMin_seats();
            row[7]=c.isMaintenance_certificate();
            row[8]=c.isAvailable();
            row[9]=c.getModel_num();
            row[10]=c.getSerial_num();
            dtm.addRow(row);
            }
        }
        
        
       
        
    }//GEN-LAST:event_carFTItemStateChanged

    private void manufactureButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manufactureButtonActionPerformed
        // TODO add your handling code here:
        brandFT.setEnabled(false);
        cityButton.setEnabled(false);
        carFT.setEnabled(false);
        manuYearFT.setEnabled(false);
        maxFT.setEnabled(false);
        minFT.setEnabled(false);
        certiFT.setEnabled(false);
        yesRadio.setEnabled(false);
        noRadio.setEnabled(false);
        modelFT.setEnabled(false);
        serialFT.setEnabled(false);
        manufactureFT.setEnabled(true);
        
    }//GEN-LAST:event_manufactureButtonActionPerformed

    private void manufactureFTKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_manufactureFTKeyReleased
        // TODO add your handling code here:
        String result=manufactureFT.getText();
        dtm = (DefaultTableModel)carTable.getModel();
        dtm.setRowCount(0);
        for(Car c : carCatalog.getCarCatalog()){
            if(c.getManufacture().equalsIgnoreCase(result)||result.isEmpty()){   
            Object[] row = new Object[dtm.getColumnCount()];
            row[0]=c;
            row[1]=c.getAvailble_city();
            row[2]=c.getCar_Type();
            row[3]=c.getManufacture();
            row[4]=c.getManufactured_year();
            row[5]=c.getMax_seats();
            row[6]=c.getMin_seats();
            row[7]=c.isMaintenance_certificate();
            row[8]=c.isAvailable();
            row[9]=c.getModel_num();
            row[10]=c.getSerial_num();
            dtm.addRow(row);
            }
        }
    }//GEN-LAST:event_manufactureFTKeyReleased

    private void viewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewButtonActionPerformed
        // TODO add your handling code here:
        
        int selectedRows = carTable.getSelectedRow();
        
        if(selectedRows < 0){
            JOptionPane.showMessageDialog(null, "Please select a Product","Warning", JOptionPane.WARNING_MESSAGE);
        } else{
            Car car = (Car)carTable.getValueAt(selectedRows,0);
            ViewCarPanel viewPanel = new ViewCarPanel(rightPanel, car, carCatalog);
            rightPanel.add("ViewPanel",viewPanel);
            CardLayout layout = (CardLayout) rightPanel.getLayout();
            layout.next(rightPanel);
        }
        
         
    }//GEN-LAST:event_viewButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
          this.rightPanel.remove(this);
        CardLayout layout = (CardLayout)this.rightPanel.getLayout();

        Component[] comps = this.rightPanel.getComponents();
        for(Component comp :  comps){
            if(comp instanceof browseJPanel){
                UploadJPanel uploadJpanel = (UploadJPanel) comp;
              
            }
        }
        layout.previous(rightPanel);
        
        
    }//GEN-LAST:event_backButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
        
         int selectedRows = carTable.getSelectedRow();
        
        if(selectedRows >= 0){
            int dialogButton = JOptionPane.YES_NO_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog(null, "Would you like to delete the product?","Warning",dialogButton);
            if(dialogResult == JOptionPane.YES_OPTION){
                Car car = (Car) carTable.getValueAt(selectedRows, 0);
                carCatalog.deleteProduct(car);
                populate(carCatalog);
            }
            }
           
         else{
            JOptionPane.showMessageDialog(null, "Please select a Product","Warning", JOptionPane.WARNING_MESSAGE);
        }
        
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void maxFTStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_maxFTStateChanged
        // TODO add your handling code here:
       
        int max = Integer.parseInt(String.valueOf(maxFT.getValue()));
        dtm = (DefaultTableModel)carTable.getModel();
        dtm.setRowCount(0);
        System.out.println(max);
        for(Car c : carCatalog.getCarCatalog()){
            if(c.getMax_seats()<=max&&c.getMax_seats()>=0){   
            Object[] row = new Object[dtm.getColumnCount()];
            row[0]=c;
            row[1]=c.getAvailble_city();
            row[2]=c.getCar_Type();
            row[3]=c.getManufacture();
            row[4]=c.getManufactured_year();
            row[5]=c.getMax_seats();
            row[6]=c.getMin_seats();
            row[7]=c.isMaintenance_certificate();
            row[8]=c.isAvailable();
            row[9]=c.getModel_num();
            row[10]=c.getSerial_num();
            dtm.addRow(row);
            }
        }
        
        
        
    }//GEN-LAST:event_maxFTStateChanged

    private void minFTStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_minFTStateChanged
        // TODO add your handling code here:
           int min = Integer.parseInt(String.valueOf(minFT.getValue()));
        dtm = (DefaultTableModel)carTable.getModel();
        dtm.setRowCount(0);
        System.out.println(min);
        for(Car c : carCatalog.getCarCatalog()){
            if(c.getMin_seats()>=min&&c.getMin_seats()<=c.getMax_seats()){   
            Object[] row = new Object[dtm.getColumnCount()];
            row[0]=c;
            row[1]=c.getAvailble_city();
            row[2]=c.getCar_Type();
            row[3]=c.getManufacture();
            row[4]=c.getManufactured_year();
            row[5]=c.getMax_seats();
            row[6]=c.getMin_seats();
            row[7]=c.isMaintenance_certificate();
            row[8]=c.isAvailable();
            row[9]=c.getModel_num();
            row[10]=c.getSerial_num();
            dtm.addRow(row);
            }
        }
    }//GEN-LAST:event_minFTStateChanged

    private void expireCheckboxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_expireCheckboxItemStateChanged
        // TODO add your handling code here:
         Boolean result=expireCheckbox.isSelected();
        dtm = (DefaultTableModel)carTable.getModel();
        dtm.setRowCount(0);
        if(result){
        for(Car c : carCatalog.getCarCatalog()){
            if(!c.isMaintenance_certificate()){   
            Object[] row = new Object[dtm.getColumnCount()];
            row[0]=c;
            row[1]=c.getAvailble_city();
            row[2]=c.getCar_Type();
            row[3]=c.getManufacture();
            row[4]=c.getManufactured_year();
            row[5]=c.getMax_seats();
            row[6]=c.getMin_seats();
            row[7]=c.isMaintenance_certificate();
            row[8]=c.isAvailable();
            row[9]=c.getModel_num();
            row[10]=c.getSerial_num();
            dtm.addRow(row);
            }
        }
        }
        else{
            populate(carCatalog);
        }
    }//GEN-LAST:event_expireCheckboxItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton availButton;
    private javax.swing.JLabel availcarsLabel;
    private javax.swing.JButton backButton;
    private javax.swing.JButton brandButton;
    private javax.swing.JTextField brandFT;
    private javax.swing.JComboBox<String> carFT;
    private javax.swing.JTable carTable;
    private javax.swing.JButton carTypeButton;
    private javax.swing.JCheckBox certiFT;
    private javax.swing.JButton certificateButton;
    private javax.swing.JButton city;
    private javax.swing.JTextField cityButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JCheckBox expireCheckbox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel latestUpdateLabel;
    private javax.swing.JButton manuFButton;
    private javax.swing.JTextField manuYearFT;
    private javax.swing.JButton manufactureButton;
    private javax.swing.JTextField manufactureFT;
    private javax.swing.JButton maxButton;
    private javax.swing.JSpinner maxFT;
    private javax.swing.JButton minButton;
    private javax.swing.JSpinner minFT;
    private javax.swing.JButton modelButton;
    private javax.swing.JTextField modelFT;
    private javax.swing.JRadioButton noRadio;
    private javax.swing.JLabel notAvail;
    private javax.swing.JButton serialButton;
    private javax.swing.JTextField serialFT;
    private javax.swing.JButton viewButton;
    private javax.swing.JRadioButton yesRadio;
    // End of variables declaration//GEN-END:variables
}
