/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.TrekManagerRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Organization.TrekManagerOrganization;
import Business.Trek.Trek;
import Business.UserAccount.UserAccount;
import Business.Validations.Validations;
import UserInterface.TrekFinanceManagerRole.CostPlanningJPanel;
import java.awt.CardLayout;
import java.awt.Component;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import UserInterface.TrekFinanceManagerRole.TrekFinanceManagerWorkAreaJPanel;
import java.awt.Image;
import java.text.ParseException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;

/**
 *
 * @author dedhi
 */
public class EditTrekJPanel extends javax.swing.JPanel {

    /**
     * Creates new form EditTrekJPanel
     */
    private JPanel userProcessContainer;
    private UserAccount account;
    private TrekManagerOrganization trekManagerOrganization;
    private Enterprise enterprise;
    private EcoSystem business;
    private String trekVideoPath;
    private ArrayList<String> trekImagePath = new ArrayList<String>();
    private Validations validations = new Validations();
    private Trek trek;
    private DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
    private DateFormat timeFormat = new SimpleDateFormat("HH:mm");
    private DateFormat dateTimeFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm");
    int count = 0;
    int trekImagePosition = 0;
    public EditTrekJPanel(JPanel userProcessContainer, UserAccount account, TrekManagerOrganization trekManagerOrganization, Enterprise enterprise, EcoSystem business, Trek trek) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.account = account;
        this.trekManagerOrganization = trekManagerOrganization;
        this.enterprise = enterprise;
        this.business = business;
        this.trek = trek;
        populateTrekDetailsJPanel();
    }
    
    public void populateTrekDetailsJPanel(){
        trekNameTxtField.setText(trek.getTrekName());
        trekLocTxtField.setText(trek.getTrekLocation());
        trekDescTxtField.setText(trek.getTrekDescription());
        difficultyLevelComboBox.setSelectedItem(trek.getTrekDifficultyLevel());
        basicReqTxtArea.setText(trek.getTrekBasicRequirement());
        durationSpinner.setValue(trek.getTrekDuration());
        itineraryTextArea.setText(trek.getTrekItinerary());
        weatherComboBox.setSelectedItem(trek.getTrekWeather());
        pickUpPointTxtField.setText(trek.getTrekPickUpPoint());
        baseCampTxtField.setText(trek.getTrekBaseCamp());
        maxAltitudeSpinner.setValue(trek.getTrekMaxAltitude());
        minAgeSpinner.setValue(trek.getTrekMinAge());
        bestTimeToTrekTxtField.setText(trek.getTrekBestTimeToVisit());
        fitnessRequiredTxtArea.setText(trek.getTrekFitnessRequired());
        trekImagePath = trek.getTrekImages();
        trekVideoPath = trek.getTrekVideo();
        String imagesPath = "";
        for(String image: trek.getTrekImages()){
            imagesPath = imagesPath+", "+image;
        }
        trekImageNamesLabel.setText(imagesPath);
        trekVideoNameLabel.setText(trek.getTrekVideo());
        displayImage(trekImagePath.get(0));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane4 = new javax.swing.JScrollPane();
        editTrekJPanel = new javax.swing.JPanel();
        updateButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        trekLocTxtField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        trekDescTxtField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        basicReqTxtArea = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();
        durationSpinner = new javax.swing.JSpinner();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        itineraryTextArea = new javax.swing.JTextArea();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        pickUpPointTxtField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        trekNameTxtField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        difficultyLevelComboBox = new javax.swing.JComboBox();
        weatherComboBox = new javax.swing.JComboBox();
        jLabel23 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        baseCampTxtField = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        maxAltitudeSpinner = new javax.swing.JSpinner();
        jLabel12 = new javax.swing.JLabel();
        minAgeSpinner = new javax.swing.JSpinner();
        jLabel13 = new javax.swing.JLabel();
        bestTimeToTrekTxtField = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        fitnessRequiredTxtArea = new javax.swing.JTextArea();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        uploadImageButton = new javax.swing.JButton();
        uploadVideoButton = new javax.swing.JButton();
        trekImageNamesLabel = new javax.swing.JLabel();
        trekVideoNameLabel = new javax.swing.JLabel();
        trekImageLabel = new javax.swing.JLabel();
        imagePreviousButton = new javax.swing.JButton();
        imageNextButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();

        editTrekJPanel.setBackground(new java.awt.Color(33, 108, 205));

        updateButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/TrekManagerRole/updateButton.png"))); // NOI18N
        updateButton.setContentAreaFilled(false);
        updateButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        saveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/TrekManagerRole/saveButton.png"))); // NOI18N
        saveButton.setContentAreaFilled(false);
        saveButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        saveButton.setEnabled(false);
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        trekLocTxtField.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        trekLocTxtField.setEnabled(false);

        jLabel3.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Trek Description");

        trekDescTxtField.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        trekDescTxtField.setEnabled(false);

        jLabel4.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Difficulty Level");

        jLabel5.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Basic Requirements");

        basicReqTxtArea.setColumns(20);
        basicReqTxtArea.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        basicReqTxtArea.setRows(5);
        basicReqTxtArea.setEnabled(false);
        jScrollPane1.setViewportView(basicReqTxtArea);

        jLabel6.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Duration");

        durationSpinner.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        durationSpinner.setEnabled(false);

        jLabel7.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Trek Itinerary");

        itineraryTextArea.setColumns(20);
        itineraryTextArea.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        itineraryTextArea.setRows(5);
        itineraryTextArea.setEnabled(false);
        jScrollPane2.setViewportView(itineraryTextArea);

        jLabel8.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Weather");

        jLabel9.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Pick Up Point");

        pickUpPointTxtField.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        pickUpPointTxtField.setEnabled(false);

        jLabel1.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Trek Name");

        trekNameTxtField.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        trekNameTxtField.setEnabled(false);

        jLabel2.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Trek Location");

        difficultyLevelComboBox.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        difficultyLevelComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Easy", "Easy-Moderate", "Moderate", "Moderate-Difficult", "Difficult" }));
        difficultyLevelComboBox.setEnabled(false);

        weatherComboBox.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        weatherComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Summer", "Winter", "Fall" }));
        weatherComboBox.setEnabled(false);

        jLabel23.setFont(new java.awt.Font("Comic Sans MS", 0, 24)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(255, 255, 255));
        jLabel23.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel23.setText("Edit Trek");

        jLabel10.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Base Camp");

        baseCampTxtField.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        baseCampTxtField.setEnabled(false);

        jLabel11.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Maximum Altitude");

        maxAltitudeSpinner.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        maxAltitudeSpinner.setEnabled(false);

        jLabel12.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("Minimum Age");

        minAgeSpinner.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        minAgeSpinner.setEnabled(false);

        jLabel13.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("Best Time to trek");

        bestTimeToTrekTxtField.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        bestTimeToTrekTxtField.setEnabled(false);

        jLabel14.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("Fitness Required");

        fitnessRequiredTxtArea.setColumns(20);
        fitnessRequiredTxtArea.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        fitnessRequiredTxtArea.setRows(5);
        fitnessRequiredTxtArea.setEnabled(false);
        jScrollPane3.setViewportView(fitnessRequiredTxtArea);

        jLabel17.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(255, 255, 255));
        jLabel17.setText("Trek Images");

        jLabel18.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(255, 255, 255));
        jLabel18.setText("Trek Video");

        uploadImageButton.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        uploadImageButton.setText("Upload Image");
        uploadImageButton.setEnabled(false);
        uploadImageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadImageButtonActionPerformed(evt);
            }
        });

        uploadVideoButton.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        uploadVideoButton.setText("Upload Video");
        uploadVideoButton.setEnabled(false);
        uploadVideoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadVideoButtonActionPerformed(evt);
            }
        });

        trekImageNamesLabel.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        trekImageNamesLabel.setText("Image names");

        trekVideoNameLabel.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        trekVideoNameLabel.setText("Video name");

        imagePreviousButton.setText("<<");
        imagePreviousButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imagePreviousButtonActionPerformed(evt);
            }
        });

        imageNextButton.setText(">>");
        imageNextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imageNextButtonActionPerformed(evt);
            }
        });

        removeButton.setText("Remove");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        backButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/CustomerRole/backButton.png"))); // NOI18N
        backButton.setContentAreaFilled(false);
        backButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout editTrekJPanelLayout = new javax.swing.GroupLayout(editTrekJPanel);
        editTrekJPanel.setLayout(editTrekJPanelLayout);
        editTrekJPanelLayout.setHorizontalGroup(
            editTrekJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editTrekJPanelLayout.createSequentialGroup()
                .addGap(66, 66, 66)
                .addGroup(editTrekJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, editTrekJPanelLayout.createSequentialGroup()
                        .addGroup(editTrekJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, editTrekJPanelLayout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(598, 598, 598))
                            .addGroup(editTrekJPanelLayout.createSequentialGroup()
                                .addGroup(editTrekJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(98, 98, 98)
                                .addGroup(editTrekJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(trekDescTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(editTrekJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(difficultyLevelComboBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(trekNameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(trekLocTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, editTrekJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(editTrekJPanelLayout.createSequentialGroup()
                                    .addGap(281, 281, 281)
                                    .addGroup(editTrekJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(weatherComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(durationSpinner, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, editTrekJPanelLayout.createSequentialGroup()
                                    .addGroup(editTrekJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGap(598, 598, 598)))
                            .addGroup(editTrekJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(editTrekJPanelLayout.createSequentialGroup()
                                    .addGap(281, 281, 281)
                                    .addGroup(editTrekJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(bestTimeToTrekTxtField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(minAgeSpinner, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(maxAltitudeSpinner, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(baseCampTxtField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(pickUpPointTxtField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, editTrekJPanelLayout.createSequentialGroup()
                                    .addGroup(editTrekJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(598, 598, 598))))
                        .addGroup(editTrekJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(editTrekJPanelLayout.createSequentialGroup()
                                .addGap(49, 49, 49)
                                .addComponent(trekImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 483, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(editTrekJPanelLayout.createSequentialGroup()
                                .addGap(132, 132, 132)
                                .addComponent(imagePreviousButton)
                                .addGap(70, 70, 70)
                                .addComponent(removeButton)
                                .addGap(70, 70, 70)
                                .addComponent(imageNextButton))
                            .addGroup(editTrekJPanelLayout.createSequentialGroup()
                                .addGap(112, 112, 112)
                                .addGroup(editTrekJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(backButton)
                                    .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(33, 33, 33)
                                .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(30, 30, 30))
                    .addGroup(editTrekJPanelLayout.createSequentialGroup()
                        .addGroup(editTrekJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(editTrekJPanelLayout.createSequentialGroup()
                                .addGroup(editTrekJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE))
                                .addGap(98, 98, 98)
                                .addGroup(editTrekJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(uploadImageButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(uploadVideoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(28, 28, 28)
                                .addGroup(editTrekJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(trekImageNamesLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(trekVideoNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(editTrekJPanelLayout.createSequentialGroup()
                                .addGap(411, 411, 411)
                                .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(editTrekJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())))
        );
        editTrekJPanelLayout.setVerticalGroup(
            editTrekJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, editTrekJPanelLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jLabel23)
                .addGap(31, 31, 31)
                .addGroup(editTrekJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(editTrekJPanelLayout.createSequentialGroup()
                        .addComponent(trekImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(editTrekJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(imageNextButton)
                            .addComponent(imagePreviousButton)
                            .addComponent(removeButton))
                        .addGap(18, 18, 18)
                        .addGroup(editTrekJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(updateButton)
                            .addComponent(saveButton)))
                    .addGroup(editTrekJPanelLayout.createSequentialGroup()
                        .addGroup(editTrekJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(trekNameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(editTrekJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(trekLocTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(editTrekJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(editTrekJPanelLayout.createSequentialGroup()
                                .addComponent(trekDescTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(editTrekJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(difficultyLevelComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4)))
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(editTrekJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(editTrekJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(durationSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editTrekJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(editTrekJPanelLayout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addComponent(backButton)))
                .addGap(10, 10, 10)
                .addGroup(editTrekJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(weatherComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(editTrekJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(pickUpPointTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editTrekJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(baseCampTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editTrekJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(maxAltitudeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editTrekJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(minAgeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editTrekJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(bestTimeToTrekTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editTrekJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel14)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(editTrekJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(uploadImageButton)
                    .addComponent(trekImageNamesLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editTrekJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(uploadVideoButton)
                    .addComponent(trekVideoNameLabel))
                .addGap(541, 541, 541))
        );

        jScrollPane4.setViewportView(editTrekJPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 1700, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 1179, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        // TODO add your handling code here:
        updateButton.setEnabled(false);
        saveButton.setEnabled(true);
        trekNameTxtField.setEnabled(true);
        trekLocTxtField.setEnabled(true);
        trekDescTxtField.setEnabled(true);
        difficultyLevelComboBox.setEnabled(true);
        basicReqTxtArea.setEnabled(true);
        durationSpinner.setEnabled(true);
        itineraryTextArea.setEnabled(true);
        weatherComboBox.setEnabled(true);
        pickUpPointTxtField.setEnabled(true);
        baseCampTxtField.setEnabled(true);
        maxAltitudeSpinner.setEnabled(true);
        minAgeSpinner.setEnabled(true);
        bestTimeToTrekTxtField.setEnabled(true);
        fitnessRequiredTxtArea.setEnabled(true);
        uploadImageButton.setEnabled(true);
        uploadVideoButton.setEnabled(true);
    }//GEN-LAST:event_updateButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        // TODO add your handling code here:
        int flag = checkForValidations(trekNameTxtField.getText(),trekLocTxtField.getText(),trekDescTxtField.getText(),basicReqTxtArea.getText(),durationSpinner.getValue().toString(),
            itineraryTextArea.getText(),weatherComboBox.getSelectedItem().toString(),pickUpPointTxtField.getText(),baseCampTxtField.getText(),maxAltitudeSpinner.getValue().toString(),
            minAgeSpinner.getValue().toString(),bestTimeToTrekTxtField.getText(),fitnessRequiredTxtArea.getText(),trekImagePath);
        if(flag == 0){
            return;
        }
        trek.setTrekName(trekNameTxtField.getText());
        trek.setTrekLocation(trekLocTxtField.getText());
        trek.setTrekDescription(trekDescTxtField.getText());
        trek.setTrekDifficultyLevel(difficultyLevelComboBox.getSelectedItem().toString());
        trek.setTrekBasicRequirement(basicReqTxtArea.getText());
        trek.setTrekDuration(Integer.parseInt(durationSpinner.getValue().toString()));
        trek.setTrekItinerary(itineraryTextArea.getText());
        trek.setTrekWeather(weatherComboBox.getSelectedItem().toString());
        trek.setTrekPickUpPoint(pickUpPointTxtField.getText());
        trek.setTrekBaseCamp(baseCampTxtField.getText());
        trek.setTrekMaxAltitude(Integer.parseInt(maxAltitudeSpinner.getValue().toString()));
        trek.setTrekMinAge(Integer.parseInt(minAgeSpinner.getValue().toString()));
        trek.setTrekBestTimeToVisit(bestTimeToTrekTxtField.getText());
        trek.setTrekFitnessRequired(fitnessRequiredTxtArea.getText());
        trek.setTrekVideo(trekVideoPath);
        trek.setTrekImages(trekImagePath);

        updateButton.setEnabled(true);
        saveButton.setEnabled(false);
        trekNameTxtField.setEnabled(false);
        trekLocTxtField.setEnabled(false);
        trekDescTxtField.setEnabled(false);
        difficultyLevelComboBox.setEnabled(false);
        basicReqTxtArea.setEnabled(false);
        durationSpinner.setEnabled(false);
        itineraryTextArea.setEnabled(false);
        weatherComboBox.setEnabled(false);
        pickUpPointTxtField.setEnabled(false);
        baseCampTxtField.setEnabled(false);
        maxAltitudeSpinner.setEnabled(false);
        minAgeSpinner.setEnabled(false);
        bestTimeToTrekTxtField.setEnabled(false);
        fitnessRequiredTxtArea.setEnabled(false);
        uploadImageButton.setEnabled(false);
        uploadVideoButton.setEnabled(false);
        JOptionPane.showMessageDialog(null, "Trek updated successfully");
        populateTrekDetailsJPanel();
    }//GEN-LAST:event_saveButtonActionPerformed

    private void uploadImageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadImageButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Select Trek Images");
        fileChooser.setAcceptAllFileFilterUsed(false);
        //FileNameExtensionFilter nameFilter = new FileNameExtensionFilter("PNG, JPG and JPEG files only","png","jpg","jpeg");
        //fileChooser.addChoosableFileFilter(nameFilter);
        int i = fileChooser.showOpenDialog(fileChooser);

        if(i == JFileChooser.APPROVE_OPTION)
        {
            String trekImage = fileChooser.getSelectedFile().getAbsolutePath();
            String trekImageName = fileChooser.getSelectedFile().getName();
            trekImageNamesLabel.setText("");
            trekImageNamesLabel.setText(trekImageNamesLabel.getText()+", "+trekImageName);
            trekImagePath.add(trekImage);
        }else {
            JOptionPane.showMessageDialog(null,"No image selected","Error",JOptionPane.INFORMATION_MESSAGE);
            return;
        }
    }//GEN-LAST:event_uploadImageButtonActionPerformed

    private void uploadVideoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadVideoButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Select a Trek video");
        fileChooser.setAcceptAllFileFilterUsed(false);
        //FileNameExtensionFilter nameFilter = new FileNameExtensionFilter("PNG, JPG and JPEG files only","png","jpg","jpeg");
        //fileChooser.addChoosableFileFilter(nameFilter);
        int i = fileChooser.showOpenDialog(fileChooser);

        if(i == JFileChooser.APPROVE_OPTION)
        {
            trekVideoPath = fileChooser.getSelectedFile().getAbsolutePath();
            trekVideoNameLabel.setText(fileChooser.getSelectedFile().getName());

        }else {
            JOptionPane.showMessageDialog(null,"No video selected","Error",JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_uploadVideoButtonActionPerformed

    public void displayImage(String trekImagePath){
        trekImageLabel.setIcon(new ImageIcon(new ImageIcon(trekImagePath).getImage().getScaledInstance(483, 300, Image.SCALE_SMOOTH)));	
    }
    
    private void imagePreviousButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imagePreviousButtonActionPerformed
        // TODO add your handling code here:
        if(count==0){
            count=trekImagePath.size();
        }
        displayImage(trekImagePath.get(count-1));
        trekImagePosition = count-1;
        count--;
    }//GEN-LAST:event_imagePreviousButtonActionPerformed

    private void imageNextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imageNextButtonActionPerformed
        // TODO add your handling code here:
        if(count==trekImagePath.size()-1){
            count=-1;
        }
        displayImage(trekImagePath.get(count+1));
        trekImagePosition = count+1;
        count++;
    }//GEN-LAST:event_imageNextButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        // TODO add your handling code here:
        if(trekImagePath.size() == 1){
            JOptionPane.showMessageDialog(null, "One image is mandatory to keep");
            return;
        }
        trekImagePath.remove(trekImagePosition);
        displayImage(trekImagePath.get(0));
    }//GEN-LAST:event_removeButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        Component[] comps = this.userProcessContainer.getComponents();
        for(Component comp: comps){
            if(comp instanceof TrekManagerWorkAreaJPanel){
                TrekManagerWorkAreaJPanel trekManagerWorkArea = (TrekManagerWorkAreaJPanel) comp;
                trekManagerWorkArea.populateTrekDetailsTable();
            }
        }
        layout.previous(userProcessContainer);
        
    }//GEN-LAST:event_backButtonActionPerformed

    public int checkForValidations(String trekName, String trekLocation, String trekDesc, String trekBasicReq, String trekDuration, String trekItinerary, String trekWeather,
            String trekPickUpPoint, String trekBaseCamp, String trekMaxAltitude, String trekMinAge, String trekBestTimeToVisit, String trekFitnessReq, ArrayList<String> trekImagePath){
        
        if(trekName == null || trekName.isEmpty()){
            JOptionPane.showMessageDialog(null, "Trek Name cannot be empty","Warning", JOptionPane.WARNING_MESSAGE);
            return 0;
        }
        if(validations.atleastOneLetterValidation(trekName)){
            JOptionPane.showMessageDialog(null, "Please enter a valid Trek name","Warning", JOptionPane.WARNING_MESSAGE);
            return 0;
        }
        
        if(trekLocation == null || trekLocation.isEmpty()){
            JOptionPane.showMessageDialog(null, "Trek Location cannot be empty","Warning", JOptionPane.WARNING_MESSAGE);
            return 0;
        }
        if(validations.atleastOneLetterValidation(trekLocation)){
            JOptionPane.showMessageDialog(null, "Trek Location can only contain letters","Warning", JOptionPane.WARNING_MESSAGE);
            return 0;
        }
        
        if(trekDesc == null || trekDesc.isEmpty()){
            JOptionPane.showMessageDialog(null, "Trek Description cannot be empty","Warning", JOptionPane.WARNING_MESSAGE);
            return 0;
        }
        
        if(validations.atleastOneLetterValidation(trekDesc)){
                JOptionPane.showMessageDialog(null, "Please enter valid Trek Description","Warning", JOptionPane.WARNING_MESSAGE);
                return 0;
        }
        
        if(trekBasicReq == null || trekBasicReq.isEmpty()){
            JOptionPane.showMessageDialog(null, "Trek Basic Requirements cannot be empty","Warning", JOptionPane.WARNING_MESSAGE);
            return 0;
        }
        
        if(validations.atleastOneLetterValidation(trekBasicReq)){
                JOptionPane.showMessageDialog(null, "Please enter valid Basic Requirements","Warning", JOptionPane.WARNING_MESSAGE);
                return 0;
        }
        
        if(trekDuration == null || trekDuration.isEmpty()){
            JOptionPane.showMessageDialog(null, "Trek duration cannot be empty","Warning", JOptionPane.WARNING_MESSAGE);
            return 0;
        }
        
        try{
            if(Integer.parseInt(trekDuration) <= 0){
                JOptionPane.showMessageDialog(null, "Please enter a valid Trek duration","Warning", JOptionPane.WARNING_MESSAGE);
                return 0;
            }
        }
        catch(NumberFormatException e){
            JOptionPane.showMessageDialog(null, "Please enter a valid Trek duration","Warning", JOptionPane.WARNING_MESSAGE);
                return 0;
        }
        
        if(trekItinerary == null || trekItinerary.isEmpty()){
            JOptionPane.showMessageDialog(null, "Trek Itinerary cannot be empty","Warning", JOptionPane.WARNING_MESSAGE);
            return 0;
        }
        
        if(validations.atleastOneLetterValidation(trekItinerary)){
                JOptionPane.showMessageDialog(null, "Please enter valid Trek Itinerary","Warning", JOptionPane.WARNING_MESSAGE);
                return 0;
        }
        
        if(trekWeather == null || trekWeather.isEmpty()){
            JOptionPane.showMessageDialog(null, "Trek Weather cannot be empty","Warning", JOptionPane.WARNING_MESSAGE);
            return 0;
        }
        
        if(!validations.onlyLettersValidation(trekWeather)){
            JOptionPane.showMessageDialog(null, "Trek weather can only contain letters","Warning", JOptionPane.WARNING_MESSAGE);
            return 0;
        }
        
        if(trekPickUpPoint == null || trekPickUpPoint.isEmpty()){
            JOptionPane.showMessageDialog(null, "Trek Pickup Point cannot be empty","Warning", JOptionPane.WARNING_MESSAGE);
            return 0;
        }
        
        if(validations.atleastOneLetterValidation(trekPickUpPoint)){
                JOptionPane.showMessageDialog(null, "Please enter valid Pickup Point","Warning", JOptionPane.WARNING_MESSAGE);
                return 0;
        }
        
        if(trekBaseCamp == null || trekBaseCamp.isEmpty()){
            JOptionPane.showMessageDialog(null, "Trek BaseCamp cannot be empty","Warning", JOptionPane.WARNING_MESSAGE);
            return 0;
        }
        
        if(validations.atleastOneLetterValidation(trekBaseCamp)){
                JOptionPane.showMessageDialog(null, "Please enter valid BaseCamp","Warning", JOptionPane.WARNING_MESSAGE);
                return 0;
        }
        
        if(trekMaxAltitude == null || trekMaxAltitude.isEmpty()){
            JOptionPane.showMessageDialog(null, "Trek Maximum Altitude cannot be empty","Warning", JOptionPane.WARNING_MESSAGE);
            return 0;
        }
        
        try{
            if(Integer.parseInt(trekMaxAltitude) <= 0){
                JOptionPane.showMessageDialog(null, "Please enter a valid Maximum Altitude","Warning", JOptionPane.WARNING_MESSAGE);
                return 0;
            }
        }
        catch(NumberFormatException e){
            JOptionPane.showMessageDialog(null, "Please enter a valid Maximum Altitude","Warning", JOptionPane.WARNING_MESSAGE);
                return 0;
        }
        
        if(trekMinAge == null || trekMinAge.isEmpty()){
            JOptionPane.showMessageDialog(null, "Trek Minimum Age cannot be empty","Warning", JOptionPane.WARNING_MESSAGE);
            return 0;
        }
        
        try{
            if(Integer.parseInt(trekMinAge) <= 0){
                JOptionPane.showMessageDialog(null, "Please enter a valid Minimum Age","Warning", JOptionPane.WARNING_MESSAGE);
                return 0;
            }
        }
        catch(NumberFormatException e){
            JOptionPane.showMessageDialog(null, "Please enter a valid Minimum Age","Warning", JOptionPane.WARNING_MESSAGE);
                return 0;
        }
        
        if(trekBestTimeToVisit == null || trekBestTimeToVisit.isEmpty()){
            JOptionPane.showMessageDialog(null, "Trek Best time to visit cannot be empty","Warning", JOptionPane.WARNING_MESSAGE);
            return 0;
        }
        
        if(validations.atleastOneLetterValidation(trekBestTimeToVisit)){
                JOptionPane.showMessageDialog(null, "Please enter valid Best time to visit","Warning", JOptionPane.WARNING_MESSAGE);
                return 0;
        }
        
        if(trekFitnessReq == null || trekFitnessReq.isEmpty()){
            JOptionPane.showMessageDialog(null, "Trek Fitness Requirement cannot be empty","Warning", JOptionPane.WARNING_MESSAGE);
            return 0;
        }
        
        if(validations.atleastOneLetterValidation(trekFitnessReq)){
                JOptionPane.showMessageDialog(null, "Please enter valid Trek Fitness Requirement","Warning", JOptionPane.WARNING_MESSAGE);
                return 0;
        }
        
        if(trekImagePath.isEmpty()){
            JOptionPane.showMessageDialog(null, "Please upload atleast one image","Warning",JOptionPane.WARNING_MESSAGE);
            return 0;
        }
        return 1;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JTextField baseCampTxtField;
    private javax.swing.JTextArea basicReqTxtArea;
    private javax.swing.JTextField bestTimeToTrekTxtField;
    private javax.swing.JComboBox difficultyLevelComboBox;
    private javax.swing.JSpinner durationSpinner;
    private javax.swing.JPanel editTrekJPanel;
    private javax.swing.JTextArea fitnessRequiredTxtArea;
    private javax.swing.JButton imageNextButton;
    private javax.swing.JButton imagePreviousButton;
    private javax.swing.JTextArea itineraryTextArea;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSpinner maxAltitudeSpinner;
    private javax.swing.JSpinner minAgeSpinner;
    private javax.swing.JTextField pickUpPointTxtField;
    private javax.swing.JButton removeButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JTextField trekDescTxtField;
    private javax.swing.JLabel trekImageLabel;
    private javax.swing.JLabel trekImageNamesLabel;
    private javax.swing.JTextField trekLocTxtField;
    private javax.swing.JTextField trekNameTxtField;
    private javax.swing.JLabel trekVideoNameLabel;
    private javax.swing.JButton updateButton;
    private javax.swing.JButton uploadImageButton;
    private javax.swing.JButton uploadVideoButton;
    private javax.swing.JComboBox weatherComboBox;
    // End of variables declaration//GEN-END:variables
}
